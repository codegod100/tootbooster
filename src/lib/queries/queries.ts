// GENERATED by @edgedb/generate v0.3.3

import type {Executor} from "edgedb";

export type GetUserArgs = {
  "username": string;
  "host": string;
};

export type GetUserReturns = {
  "id": string;
  "access_token": string;
  "host": string;
  "username": string;
} | null;

export async function getUser(client: Executor, args: GetUserArgs): Promise<GetUserReturns> {
  return client.querySingle(`\
select User{*}
filter .username = <str>$username AND .host = <str>$host
limit 1`, args);

}


export type InsertUserArgs = {
  "username": string;
  "access_token": string;
  "host": string;
};

export type InsertUserReturns = {
  "id": string;
};

export async function insertUser(client: Executor, args: InsertUserArgs): Promise<InsertUserReturns> {
  return client.queryRequiredSingle(`\
insert User {
    username := <str>$username,
    access_token := <str>$access_token,
    host := <str>$host
}`, args);

}


export type GetApplicationArgs = {
  "host": string;
};

export type GetApplicationReturns = {
  "id": string;
  "client_id": string;
  "client_secret": string;
  "host": string;
} | null;

export async function getApplication(client: Executor, args: GetApplicationArgs): Promise<GetApplicationReturns> {
  return client.querySingle(`\
select Application{*}
filter .host = <str>$host
limit 1`, args);

}


export type InsertApplicationArgs = {
  "client_id": string;
  "client_secret": string;
  "host": string;
};

export type InsertApplicationReturns = {
  "id": string;
};

export async function insertApplication(client: Executor, args: InsertApplicationArgs): Promise<InsertApplicationReturns> {
  return client.queryRequiredSingle(`\
insert Application{
    client_id := <str>$client_id,
    client_secret := <str>$client_secret,
    host := <str>$host
}`, args);

}
